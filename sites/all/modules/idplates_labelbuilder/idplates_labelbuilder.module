<?php

/**
 * @file
 * ID Plates module file.
 */

define("FREE_COLORS", array('000000'));
define("INFO_DOT_SKUS", array('PHF257', 'PHF111', 'PHF005'));

/**
 * Implements hook_menu().
 */
function idplates_labelbuilder_menu() {
  $items = array();

  $items['labelbuilder/size/%node'] = array(
    'title' => 'ID Advantage',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('idplates_labelbuilder_size_form', 2),
    'access arguments' => array('access content'),
    'file' => 'includes/idplates_labelbuilder.sizes.inc',
  );

  $items['labelbuilder/layout/%commerce_product'] = array(
    'title' => 'ID Advantage',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('idplates_labelbuilder_layout_form', 2),
    'access arguments' => array('access content'),
    'file' => 'includes/idplates_labelbuilder.layouts.inc',
  );

  $items['labelbuilder/customize'] = array(
    'title' => 'ID Advantage',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('idplates_labelbuilder_customize_form', 2, 3, 4, 5, 6, 7),
    'access arguments' => array('access content'),
    'file' => 'includes/idplates_labelbuilder.customize.inc',
  );

  $items['labelbuilder/options'] = array(
    'title' => 'ID Advantage',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('idplates_labelbuilder_options_form'),
    'access arguments' => array('access content'),
    'file' => 'includes/idplates_labelbuilder.options.inc',
  );

  $items['idplates_labelbuilder_managed_file/ajax'] = array(
    'page callback' => 'idplates_labelbuilder_managed_file_ajax',
    'delivery callback' => 'ajax_deliver',
    'access arguments' => array('access content'),
    'theme callback' => 'ajax_base_page_theme',
    'type' => MENU_CALLBACK,
    'file' => 'includes/idplates_labelbuilder.customize.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function idplates_labelbuilder_theme($existing, $type, $theme, $path) {
  return array(
    'idplates_labelbuilder_preview' => array(
      'template' => 'idplates-labelbuilder-preview',
      'path' => drupal_get_path('module', 'idplates_labelbuilder') . '/templates',
      'arguments' => array(
        'label' => NULL,
        'backend' => NULL,
        'unique_layout' => NULL,
        'cart' => NULL,
      ),
    ),
    'idplates_labelbuilder_size' => array(
      'template' => 'idplates-labelbuilder-size',
      'path' => drupal_get_path('module', 'idplates_labelbuilder') . '/templates',
      'arguments' => array(
        'path' => NULL,
        'size' => NULL,
        'attributes' => NULL,
      ),
    ),
    'idplates_labelbuilder_layout' => array(
      'template' => 'idplates-labelbuilder-layout',
      'path' => drupal_get_path('module', 'idplates_labelbuilder') . '/templates',
      'arguments' => array(
        'path' => NULL,
        'layout' => NULL,
        'attributes' => NULL,
      ),
    ),
    'idplates_labelbuilder_color' => array(
      'template' => 'idplates-labelbuilder-color',
      'path' => drupal_get_path('module', 'idplates_labelbuilder') . '/templates',
      'arguments' => array(
        'color' => NULL,
        'hexcode' => NULL,
      ),
    ),
    'idplates_labelbuilder_adhesive' => array(
      'template' => 'idplates-labelbuilder-adhesive',
      'path' => drupal_get_path('module', 'idplates_labelbuilder') . '/templates',
      'arguments' => array(
        'path' => NULL,
        'adhesive' => NULL,
        'attributes' => NULL,
      ),
    ),
    'idplates_labelbuilder_intensification' => array(
      'template' => 'idplates-labelbuilder-intensification',
      'path' => drupal_get_path('module', 'idplates_labelbuilder') . '/templates',
      'arguments' => array(
        'path' => NULL,
        'intensification' => NULL,
        'attributes' => NULL,
      ),
    ),
    'idplates_labelbuilder_add_on' => array(
      'template' => 'idplates-labelbuilder-add-on',
      'path' => drupal_get_path('module', 'idplates_labelbuilder') . '/templates',
      'arguments' => array(
        'path' => NULL,
        'add_on' => NULL,
        'attributes' => NULL,
      ),
    ),
    'idplates_labelbuilder_live_price' => array(
      'template' => 'idplates-labelbuilder-live-price',
      'path' => drupal_get_path('module', 'idplates_labelbuilder') . '/templates',
      'arguments' => array(
        'label' => NULL,
        'quantity' => NULL,
      ),
    ),
    'idplates_labelbuilder_breadcrumb' => array(
      'template' => 'idplates-labelbuilder-breadcrumb',
      'path' => drupal_get_path('module', 'idplates_labelbuilder') . '/templates',
      'arguments' => array(
        'current_step' => NULL,
        'label' => NULL,
      ),
    ),
    'idplates_labelbuilder_hanging_tag' => array(
      'template' => 'idplates-labelbuilder-hanging-tag',
      'path' => drupal_get_path('module', 'idplates_labelbuilder') . '/templates',
      'arguments' => array(
        'label' => NULL,
        'code' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function idplates_labelbuilder_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'idplates_labelbuilder') . '/includes/views/',
    'template path' => drupal_get_path('module', 'idplates_labelbuilder') . '/includes/views/templates',
  );
}

/**
 * Implements hook_default_rules_configuration_alter().
 **/
function idplates_labelbuilder_default_rules_configuration_alter(&$configs) {
  unset($configs['commerce_price_table_override_price']);
}

/**
 * Implements hook_views_pre_build().
 */
function idplates_labelbuilder_views_pre_build(&$view) {
  if ($view->name === 'commerce_line_item_table') {
    if (!user_access('administer orders')) {
      unset($view->field['commerce_product']);
    }
  }
}

/**
 * Implements hook_commerce_shipping_service_info_alter().
 */
function idplates_labelbuilder_commerce_shipping_service_info_alter(&$shipping_services) {
  if (isset($shipping_services['free_shipping'])) {
    $shipping_services['free_shipping']['weight'] = -10;
  }
}

/**
 * Adds the label to the user's cart along with any and all extra items
 * selected in the label builder.
 *
 * @param $product
 * @param Label $label
 * @param int $uid
 * @param int $qty
 *
 * @return array|bool|null
 */
function idplates_labelbuilder_add_to_cart($product, $label, $uid = 0, $qty = 100) {
  try {
    foreach ($label->getExtras() as $item) {
      $line_item = commerce_product_line_item_new((commerce_product_load($item['product_id'])), $item['qty']);
      commerce_cart_product_add($uid, $line_item, FALSE);
    }
    $line_item = commerce_product_line_item_new($product, $qty);
    $line_item = _idplates_labelbuilder_copy_label_to_line_item($label, $line_item);
    $line_item = commerce_cart_product_add($uid, $line_item, FALSE);
    return $line_item;
  }
  catch (Exception $e) {
    return FALSE;
  }
}

/**
 * Builds the label preview section of the label builder form.
 *
 * @param $form
 * @param $form_state
 */
function idplates_labelbuilder_get_label_preview(&$form, &$form_state) {
  $form['column_right']['label_proof'] = array(
    '#type' => 'fieldset',
    '#title' => t('Label Proof'),
  );

  $unique_layout = '';
  if ($layout = taxonomy_term_load($form_state['label']->getLayoutTid())) {
    $layout_wrapper = entity_metadata_wrapper('taxonomy_term', $layout);
    $unique_layout = $layout_wrapper->field_layout_form->value();
  }

  $form['column_right']['label_proof']['preview'] = array(
    '#type' => 'item',
    '#prefix' => '<div id="idplates-labelbuilder-preview-ajax-wrapper">',
    '#suffix' => '</div>',
    '#markup' => theme('idplates_labelbuilder_preview', array(
      'label' => $form_state['label'],
      'unique_layout' => $unique_layout,
    )),
  );

  $qty = !empty($form_state['values']['qty']) ? $form_state['values']['qty'] : 100;

  $form['column_right']['label_proof']['bottom'] = array(
    '#type' => 'container',
    '#weight' => 49,
    '#prefix' => '<div class="idplates-labelbuilder-qty-price-wrapper">',
    '#suffix' => '</div>',
  );

  $add_to_cart = $form_state['build_info']['form_id'] === 'idplates_labelbuilder_options_form';

  $form['column_right']['label_proof']['bottom']['qty'] = array(
    '#type' => 'textfield',
    '#attributes' => array('class' => array('container-inline')),
    '#description' => t('Quantity'),
    '#default_value' => $qty,
    '#ajax' => array(
      'callback' => 'idplates_labelbuilder_live_price_ajax_callback',
      'method' => 'replace',
      'event' => 'change',
      'progress' => array(),
    ),
    '#maxlength' => 6,
    '#size' => 6,
    '#disabled' => !$add_to_cart,
  );

  if ($add_to_cart) {
    $form['column_right']['label_proof']['live_price'] = array(
      '#type' => 'item',
      '#markup' => theme('idplates_labelbuilder_live_price', array(
        'label' => $form_state['label'],
        'quantity' => $qty,
      )),
    );
  }
  $form['column_right']['label_proof']['bottom']['add_to_cart'] = array(
    '#type' => 'submit',
    '#value' => t('Add to Cart'),
    '#disabled' => !$add_to_cart,
    '#submit' => array('idplates_labelbuilder_add_to_cart_submit'),
    '#validate' => array('idplates_labelbuilder_add_to_cart_validate'),
  );

}

/**
 * Custom submit handler for the add to cart button in the label builder.
 */
function idplates_labelbuilder_add_to_cart_submit($form, &$form_state) {
  global $user;
  $label = $_SESSION['idplates']['label'];
  $result = idplates_labelbuilder_add_to_cart($form_state['product'], $label, $user->uid, $form_state['values']['qty']);

  if ($result) {
    $form_state['redirect'] = 'cart';
    unset($_SESSION['idplates']);
  }

}

/**
 * Custom validate for the add to cart button in the label builder.
 */
function idplates_labelbuilder_add_to_cart_validate($form, &$form_state) {
  $qty = $form_state['values']['qty'];
  if ($qty < 100) {
    form_set_error('qty', t('Minimum purchase of 100 labels.'));
  }
}

/**
 * Custom ajax callback for live price calculations.
 */
function idplates_labelbuilder_live_price_ajax_callback($form, $form_state) {
  $qty = !empty($form_state['values']['qty']) ? $form_state['values']['qty'] : $form['column_right']['label_proof']['qty']['#default_value'];

  $markup = theme('idplates_labelbuilder_live_price', array(
    'label' => $form_state['label'],
    'quantity' => $qty,
  ));
  $commands[] = ajax_command_replace('#idplates-labelbuilder-live-price-ajax-wrapper', $markup);
  return array('#type' => 'ajax', '#commands' => $commands);
}

function idplates_labelbuilder_preview_ajax_callback($form, $form_state) {
  $commands = idplates_labelbuilder_label_proof_update_commands($form, $form_state);

  return array('#type' => 'ajax', '#commands' => $commands);
}

function idplates_labelbuilder_remove_digits($form, $form_state) {
  $commands = idplates_labelbuilder_label_proof_update_commands($form, $form_state);
  $commands[] = array(
    'command' => 'idplates_labelbuilder_remove_code_chars',
    'code' => $form_state['values']['numbering_type'],
  );

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Gets the commands to update label proof.
 *
 * @param $form
 * @param $form_state
 *
 * @return array $commands
 */
function idplates_labelbuilder_label_proof_update_commands($form, $form_state) {
  $unique_layout = '';
  if ($layout = taxonomy_term_load($form_state['label']->getLayoutTid())) {
    $layout_wrapper = entity_metadata_wrapper('taxonomy_term', $layout);
    $unique_layout = $layout_wrapper->field_layout_form->value();
  }
  $markup = theme('idplates_labelbuilder_preview', array(
    'label' => $form_state['label'],
    'unique_layout' => $unique_layout,
  ));
  $commands[] = ajax_command_replace('.idplates-labelbuilder-preview', $markup);

  $qty = !empty($form_state['values']['qty']) ? $form_state['values']['qty'] : $form['column_right']['label_proof']['qty']['#default_value'];
  $markup = theme('idplates_labelbuilder_live_price', array(
    'label' => $form_state['label'],
    'quantity' => $qty,
  ));
  $commands[] = ajax_command_replace('#idplates-labelbuilder-live-price-ajax-wrapper', $markup);

  // Error messages
  $commands[] = ajax_command_remove('div.messages');
  $commands[] = ajax_command_before('#main-content', theme('status_messages'));

  return $commands;
}

/**
 * Renders the label preview.
 *
 * @param $label
 * @param $code
 * @param $no_numbering
 * @param $unique_layout
 *
 * @return string
 */
function _idplates_labelbuilder_render_label($label, $code, $no_numbering, $unique_layout = NULL) {
  $sections = explode('/', $code);
  $size = explode('x', $label->size);
  $realW = (double) $size[0];
  $realH = (double) $size[1];
  $width = $unique_layout == 'infodot' ? 80 : 260;
  $height = $width * $realH / $realW;
  $tag_color = !empty($label->getTagColor()) ? $label->getTagColor() : 'f00';
  $text_color = !empty($label->getText()['color']) ? $label->getText()['color'] : 'fff';
  $font_size['a'] = !empty($label->getText()['text_a']['size']) ? $label->getText()['text_a']['size'] : '12';
  $font_size['b'] = !empty($label->getText()['text_b']['size']) ? $label->getText()['text_b']['size'] : '12';
  $font_size['c'] = !empty($label->getText()['text_c']['size']) ? $label->getText()['text_c']['size'] : '12';
  $serial_number = _idplates_labelbuilder_generate_barcode_number($label);
  $long_tag = NULL;
  $barcode_style = $label->numbering['numbering_type'];

  // Hanging tag variables.
  if ($hanging_tag = strpos($unique_layout, 'rearview') !== FALSE) {
    $long_tag = strpos($unique_layout, 'long') !== FALSE;
    $height -= 120;
  }

  $section_height = _idplates_labelbuilder_get_section_heights($code, $height, $unique_layout, $sections);

  $markup = '';
  if ($hanging_tag) {
    $markup .= theme('idplates_labelbuilder_hanging_tag', array(
      'label' => $label,
      'code' => $code,
    ));
  }
  $markup .= '<div class="idplates-labelbuilder-preview-wrapper ' . $unique_layout . '" style="width:' . $width . 'px; height: ' . $height . 'px">';

  foreach ($sections as $index => $preview_section):
    $background = '#fff';
    $current_section_height = $section_height[$index];
    if (ctype_upper($preview_section)) {
      $background = '#' . $tag_color;
    }
    elseif (_idplates_labelbuilder_label_is_metallic($label)) {
      $background = 'url(' . base_path() . drupal_get_path('module', 'idplates_labelbuilder') . '/gfx/metal_background.png)';
    }

    $maxheight = intdiv($height * $current_section_height, 100);
    $markup .= '<div class="idplates-labelbuilder-preview-section-wrapper"
       style="height: ' . $maxheight . 'px;max-height: ' . $maxheight . 'px;color: #' . $text_color . '; background: ' . $background . ';background-size: contain;">';
    $markup .= '<div class="idplates-labelbuilder-preview-section" style="height:' . $maxheight . 'px">';
    $label_markup = '';
    foreach (str_split($preview_section) as $char) :
      $char = strtolower($char);
      $styles = '';
      $classes = '';
      $content = '';
      $tag = 'p';
      switch ($char) :
        case 'a':
        case 'b':
        case 'c':
          $styles .= 'font-size:' . $font_size[$char] . 'pt';
          $content = !empty($label->getText()['text_' . $char]['text']) ? $label->getText()['text_' . $char]['text'] : t('Text ') . strtoupper($char);
          break;
        case 'x':
          $classes = 'idplates-labelbuilder-preview-wrapper-barcode code' . $barcode_style . $no_numbering;
          $content = '*' . $serial_number . '*';
          $styles .= 'color: transparent;height:' . $section_height['barcode_height'] . 'px;margin-top:' . $section_height['barcode_margin'] . 'px;';
          break;
        case 's':
          $classes = $no_numbering . ' resize';
          if ($unique_layout == 'infodot') {
            $section_height['serial_height'] = 14;
            if (strpos(strtolower($code), 'm') !== FALSE) {
              $section_height['serial_height'] = 10;
            }
          }
          $styles .= 'font-size:' . $section_height['serial_height'] . 'pt;font-weight:bold;color:#000;';
          $content = $serial_number;
          break;
        case 'm':
          if ($unique_layout !== 'infodot') {
            $classes = 'idplates-labelbuilder-inline';
          }
          $content = theme('image', array(
            'path' => drupal_get_path('module', 'idplates_labelbuilder') . '/gfx/datamatrix.svg',
            'attributes' => array('class' => array('idplates-labelbuilder-qr-code' . ($long_tag ? ' long-tag' : ''))),
          ));
          $tag = 'div';
          break;
        case '-':
          $classes = 'idplates-labelbuilder-inline hidden';
          $tag = 'div';
          break;
        case 'l':
          $tag = 'div';
          if (!empty($label->getLogo())) {
            $logo = file_load($label->getLogo());
          }
          $content = '<div class="idplates-labelbuilder-empty-logo">LOGO<br>HERE</div>';
          if (empty($logo)) {
            $classes = 'idplates-labelbuilder-empty-logo-wrapper' . ($long_tag ? ' long-tag' : '');
          }
          else {
            $content = theme('image', array(
              'path' => file_create_url($logo->uri),
              'attributes' => array('class' => array('idplates-labelbuilder-logo')),
            ));
          }
          break;
      endswitch;

      $label_markup .= '<' . $tag . ' class="' . $classes . '" style="' . $styles . '">' . $content . '</' . $tag . '>';

    endforeach;
    $markup .= $label_markup;
    $markup .= '</div></div>';
  endforeach;
  $markup .= '</div>';

  return $markup;
}

/**
 * Gets the number of text lines from the layout code.
 *
 * @param $code
 *
 * @return int
 */
function _idplates_labelbuilder_get_textline_count($code) {
  $count = 0;
  $textline_codes = 'ABCabc';
  foreach (str_split($textline_codes) as $char) {
    if (substr_count($code, $char)) {
      $count++;
    }
  }

  return $count;
}

/**
 * Builds a section heights array used in the rendering of the label preview.
 *
 * @param $code
 * @param $height
 * @param $unique_layout
 * @param $sections
 *
 * @return array
 */
function _idplates_labelbuilder_get_section_heights($code, $height, $unique_layout, $sections) {
  if (count($sections) == 1 && $code === 's') {
    return array(
      0 => '100%',
      'serial_height' => 42,
    );
  }
  if (count($sections) == 1 && (strpos(strtolower($code), 'x') === FALSE)) {
    return array(
      0 => '100%',
      'serial_height' => 14,
    );
  }

  $logo = strpos(strtolower($code), 'l') !== FALSE;
  $numbering_only = FALSE;
  if ($no_qr_code = strpos(strtolower($code), 'm') === FALSE) {
    $numbering_only = strpos(strtolower($code), 'x') === FALSE;
  }

  $section_height = array();

  switch ($unique_layout) {
    case 'rearview-mirror-long':
      switch (_idplates_labelbuilder_get_textline_count($code)) {
        case 1:
        case 2:
          // logo
          if ($logo) {
            // This doesn't add up to 100, that's ok. The bottom section is
            // position absolute, so section[1] is given a little more percent
            // to give us some better margins that we can't achieve with css
            // because they are table cells.
            $section_height[0] = '17%';
            $section_height[1] = '23%';
            $section_height[2] = '63%';
            $section_height['barcode_height'] = $height * .48 * .85;
            $section_height['barcode_margin'] = 0;
          }
          else {
            $section_height[0] = '22%';
            $section_height[1] = '78%';
            $section_height['barcode_height'] = $height * .78 * .65;
            $section_height['barcode_margin'] = 15;
          }
          break;
        case 3:
          $section_height[0] = '22%';
          $section_height[1] = '62%';
          $section_height[2] = '16%';
          $section_height['barcode_height'] = $height * .62 * .65;
          $section_height['serial_height'] = $height * .62 * .3 * .7;
          $section_height['barcode_margin'] = 3;
          break;
        default:
          $section_height[0] = '100%';
          $section_height['barcode_height'] = $height * .7;
          $section_height['barcode_margin'] = 10;
      }

      $section_height['serial_height'] = 49;
      break;
    default:
      if ($logo) {
        switch (_idplates_labelbuilder_get_textline_count($code)) {
          case 1:
          case 2:
            $section_height[0] = '43%';
            $section_height[1] = '58%';
            $section_height['barcode_height'] = $height * .58 * .5;
            $section_height['serial_height'] = $height * .58 * .2;
            $section_height['barcode_margin'] = -5;
            break;
          case 3:
            $section_height[0] = '37%';
            $section_height[1] = '42%';
            $section_height[2] = '21%';
            $section_height['barcode_height'] = $height * .42 * .65;
            $section_height['serial_height'] = $height * .42 * .25;
            $section_height['barcode_margin'] = 3;
            break;
          default:
            $section_height[0] = '100%';
            $section_height['barcode_height'] = $height * .5;
            $section_height['serial_height'] = $height * .2;
            $section_height['barcode_margin'] = 10;
        }
      }
      else {
        switch (_idplates_labelbuilder_get_textline_count($code)) {
          case 1:
            $section_height[0] = '30%';
            $section_height[1] = '72%';
            $section_height['barcode_height'] = $height * .72 * .6;
            $section_height['serial_height'] = $height * .72 * .165;
            $section_height['barcode_margin'] = -4;
            break;
          case 2:
            $section_height[0] = '43%';
            $section_height[1] = '58%';
            $section_height['barcode_height'] = $height * .58 * .5;
            $section_height['serial_height'] = $height * .58 * .2;
            $section_height['barcode_margin'] = -5;
            break;
          case 3:
            $section_height[0] = '37%';
            $section_height[1] = '42%';
            $section_height[2] = '21%';
            $section_height['barcode_height'] = $height * .42 * .55;
            $section_height['serial_height'] = $height * .42 * .2;
            $section_height['barcode_margin'] = 3;
            break;
          default:
            $section_height[0] = '100%';
            $section_height['barcode_height'] = $height * .5;
            $section_height['serial_height'] = $height * .2;
            $section_height['barcode_margin'] = 10;
        }
        if (!$no_qr_code) {
          $section_height['serial_height'] = $height * .2;
        }
      }
  }
  if ($numbering_only) {
    $section_height['serial_height'] *= 3;
  }

  return $section_height;
}

/**
 * Custom implementation of commerce_price_table_get_amount_qty.
 *
 * @see commerce_price_table_get_amount_qty()
 *
 * @param $product
 * @param int $quantity
 * @param array $items
 *
 * @return array
 */
function _idplates_labelbuilder_get_amount_qty($product, $quantity = 1, $items = array(), $line_item) {
  $product_wrapper = entity_metadata_wrapper('commerce_product', $product);
  if (empty($items)) {
    // Support legacy versions where rules doesn't send $items over.
    // Look up all price table items in the current product.
    $fields = commerce_info_fields('commerce_price_table', 'commerce_product');
    foreach ($fields as $field) {
      if (!empty($product->{$field['field_name']})) {
        foreach ($product_wrapper->{$field['field_name']}->value() as $item) {
          $items[] = $item;
        }
      }
    }
  }

  if (!empty($line_item->data['idplates_labelbuilder']['label']) && $label = $line_item->data['idplates_labelbuilder']['label']) {
    if (_idplates_labelbuilder_use_metal_price($label)) {
      $items = $product_wrapper->field_metal_color_price_table->value();
    }
  }
  // Sort the items by quantity and return the matching one.
  uasort($items, 'commerce_price_table_sort_by_qty');
  foreach ($items as $item) {
    if ($quantity <= $item['max_qty'] && $quantity >= $item['min_qty']) {
      return $item;
    }
  }

  // Handle the unlimited qty.
  foreach ($items as $item) {
    if ($item['max_qty'] == -1) {
      return $item;
    }
  }

  // We fallback to the higher one if no match was found.
  return end($items);
}

/**
 * Checks to see if the label needs a tag color element in the customization
 * section of the label builder.
 *
 * @param $layout_code
 *
 * @return bool
 *   Needs a tag color element.
 */
function _idplates_labelbuilder_needs_tag_color($layout_code) {
  $letters = preg_replace('/[^a-zA-Z]+/', '', $layout_code);
  return !ctype_lower($letters);
}

/**
 * Checks to see if the label needs a tag color element in the customization
 * section of the label builder.
 *
 * @param $layout_code
 *
 * @return bool
 *   Needs a tag color element.
 */
function _idplates_labelbuilder_needs_text_options($layout_code) {
  return _idplates_labelbuilder_get_textline_count($layout_code) > 0;
}

/**
 * Checks to see if the label needs a tag color element in the customization
 * section of the label builder.
 *
 * @param $layout_code
 *
 * @return bool
 *   Needs a tag color element.
 */
function _idplates_labelbuilder_needs_color($layout_code) {
  return _idplates_labelbuilder_needs_tag_color($layout_code) || _idplates_labelbuilder_needs_text_options($layout_code);
}

/**
 * Checks to see if the label needs to use the metal pricing table.
 *
 * @param null $label
 *
 * @return bool
 *   Use metal pricing table.
 */
function _idplates_labelbuilder_use_metal_price($label = NULL) {
  // If the metallic label has other colours than black, use the metal pricing table instead.
  if (_idplates_labelbuilder_label_is_metallic($label)) {
    $tag_color = $label->getTagColor();
    $text_color = $label->getText()['color'];
    return !((empty($tag_color) || in_array($tag_color, FREE_COLORS)) && (empty($text_color) || in_array($text_color, FREE_COLORS)));
  }

  return FALSE;
}

/**
 * Checks to see if the label is metallic.
 *
 * @param Label $label
 *
 * @return bool
 */
function _idplates_labelbuilder_label_is_metallic($label) {
  if (!empty($label)) {
    $layout = taxonomy_term_load($label->getLayoutTid());
    if (!empty($layout)) {
      $layout_wrapper = entity_metadata_wrapper('taxonomy_term', $layout);
      return $layout_wrapper->field_layout_look->value() === 'M';
    }
  }
  return FALSE;
}

/**
 * Copies the label to the line item to be referrenced later when needed.
 *
 * @param $label
 * @param $line_item
 *
 * @return array
 */
function _idplates_labelbuilder_copy_label_to_line_item($label, &$line_item) {
  $line_item->data['idplates_labelbuilder']['label'] = $label;
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
  $line_item_wrapper->save();
  return $line_item;
}

/**
 * @param Label $label
 * @param string $code
 *
 * @return string
 */
function _idplates_labelbuilder_get_hanging_tag_color($label, $code) {
  if ($bg = $label->getTagColor()) {
    return $bg;
  }
  return 'FFFFFF';
}

/**
 * Generates the serial barcode number from the user input.
 *
 * @param Label $label - The label.
 *
 * @return string $barcode
 */
function _idplates_labelbuilder_generate_barcode_number($label) {
  $numbering = $label->numbering;
  if ($numbering['numbering_option'] == 'custom') {
    return '000001';
  }

  $barcode = $numbering['starting_digit'];
  $digits = $numbering['number_of_digits'];
  $padding = $numbering['padding'];

  if (strlen($barcode) != $digits && $padding === 'zeros') {
    $barcode = str_pad($barcode, $digits, '0', STR_PAD_LEFT);
  }

  $output = $numbering['prefix'] . $barcode . $numbering['suffix'];
  $output = idplates_labelbuilder_validate_code($label, $output);
  return $output;
}

function idplates_labelbuilder_validate_code($label, $output) {
  $code_type = $label->numbering['numbering_type'];
  if ($code_type == '39') {
    if (idplates_labelbuilder_validate_code_39($label, $output)) {
      return $output;
    }
    else {
      if (empty($_SESSION['messages']['error'])) {
        drupal_set_message(t('The label size chosen is too small for the barcode entered. Please select a label width size larger than @length" to accommodate the length of your entered barcode.', array('@length' => (float) str_replace("'", '', explode('x', $label->size)[0]))), 'error');
      }
    }
  }

  if ($code_type == '128') {
    if (idplates_labelbuilder_validate_code_128($label, $output)) {
      return $output;
    }
    else {
      if (empty($_SESSION['messages']['error'])) {
        drupal_set_message(t('The label size chosen is too small for the barcode entered. Please select a label width size larger than @length to accommodate the length of your entered barcode.', array('@length' => (float) str_replace("'", '', explode('x', $label->size)[0]))), 'error');
      }
    }
  }
}

/**
 * Validate label input: L = ((C + 2)(3N + 6)X + (C + 1)I + T).
 *
 * @param $label
 * @param $output
 *
 * @return bool
 */
function idplates_labelbuilder_validate_code_39($label, $output) {
  $measurements = explode('x', $label->size);
  $L = (float) str_replace("'", '', $measurements[0]);
  $C = strlen($output);
  $N = 2.3;
  $X = .0075;
  $I = .0075;
  $T = .25;

  return $L >= ((($C + 2) * (3 * $N + 6)) * $X) + (($C + 1) * $I) + $T;
}

/**
 * Validate label input: L = (({modifier}C + 35)X + T).
 *
 * @param $label
 * @param $output
 *
 * @return bool
 */
function idplates_labelbuilder_validate_code_128($label, $output) {
  $modifier = is_int($output) ? 11 : 5.5;
  $measurements = explode('x', $label->size);
  $L = (float) str_replace("'", '', $measurements[0]);
  $C = strlen($output);
  $X = .0075;
  $T = .25;

  return $L >= (($modifier * $C + 35) * $X + $T);
}
