<?php

/**
 * @file
 */

/**
 * Implements hook_menu().
 */
function idplates_labelbuilder_menu() {
  $items = array();

  $items['labelbuilder/size/%node'] = array(
    'title' => 'Label Builder',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('idplates_labelbuilder_size_form', 2),
    'access arguments' => array('access content'),
    'file' => 'includes/idplates_labelbuilder.sizes.inc',
  );

  $items['labelbuilder/layout/%commerce_product'] = array(
    'title' => 'Label Builder',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('idplates_labelbuilder_layout_form', 2),
    'access arguments' => array('access content'),
    'file' => 'includes/idplates_labelbuilder.layouts.inc',
  );

  $items['labelbuilder/customize/%taxonomy_term'] = array(
    'title' => 'Label Builder',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('idplates_labelbuilder_customize_form', 2),
    'access arguments' => array('access content'),
    'file' => 'includes/idplates_labelbuilder.customize.inc',
  );

  $items['labelbuilder/options'] = array(
    'title' => 'Label Builder',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('idplates_labelbuilder_options_form'),
    'access arguments' => array('access content'),
    'file' => 'includes/idplates_labelbuilder.options.inc',
  );

  $items['test'] = array(
    'title' => 'Label Builder',
    'page callback' => 'testy',
    'access arguments' => array('access content'),
  );

  return $items;
}

function testy() {
  $cart = commerce_order_load(1);
  $wrapper = entity_metadata_wrapper('commerce_order', $cart);
  foreach ($wrapper->commerce_line_items as $commerce_line_item) {
    $product = $commerce_line_item->commerce_product->field_numbering_barcode_options->set();
    $product = $commerce_line_item->commerce_product->field_label_color->set();
    $product = $commerce_line_item->commerce_product->field_label_text_line_1->set();
    $product = $commerce_line_item->commerce_product->field_label_text_line_2->set();
    $product = $commerce_line_item->commerce_product->field_label_text_line_3->set();
    $item = $commerce_line_item->value();

  }
  return '';
}

/**
 * Implements hook_theme().
 */
function idplates_labelbuilder_theme($existing, $type, $theme, $path) {
  return array(
    'idplates_labelbuilder_preview' => array(
      'template' => 'idplates-labelbuilder-preview',
      'path' => drupal_get_path('module', 'idplates_labelbuilder') . '/templates',
      'arguments' => array(
        'label' => NULL,
      ),
    ),
    'idplates_labelbuilder_size' => array(
      'template' => 'idplates-labelbuilder-size',
      'path' => drupal_get_path('module', 'idplates_labelbuilder') . '/templates',
      'arguments' => array(
        'path' => NULL,
        'size' => NULL,
        'attributes' => NULL,
      ),
    ),
    'idplates_labelbuilder_layout' => array(
      'template' => 'idplates-labelbuilder-layout',
      'path' => drupal_get_path('module', 'idplates_labelbuilder') . '/templates',
      'arguments' => array(
        'path' => NULL,
        'layout' => NULL,
        'attributes' => NULL,
      ),
    ),
    'idplates_labelbuilder_live_price' => array(
      'template' => 'idplates-labelbuilder-live-price',
      'path' => drupal_get_path('module', 'idplates_labelbuilder') . '/templates',
      'arguments' => array(
        'label' => NULL,
        'quantity' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function idplates_labelbuilder_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'idplates_labelbuilder') . '/includes/views/',
    'template path' => drupal_get_path('module', 'idplates_labelbuilder') . '/includes/views/templates',
  );
}

/**
 *
 */
function idplates_labelbuilder_get_label($size, $layout) {
  $query = db_select('field_data_field_label_size', 'b');
  $query->join('field_data_field_layout_options', 'y', 'b.entity_id = y.entity_id');
  $query
    ->condition('b.field_label_size_tid', $size)
    ->condition('y.field_layout_options_target_id', $layout)
    ->fields('b', array('entity_id'));

  $results = $query->execute()->fetchAssoc();

  return $results;
}

function idplates_labelbuilder_add_to_cart($product, $label, $uid = 0, $qty = 1) {
  try {
    foreach ($label->extras as $extra) {
      $extra_qty = 1;
      //todo: jace fix this
      $extra_item = commerce_product_line_item_new((commerce_product_load($extra)));
      commerce_cart_product_add($uid, $extra_item, FALSE);
    }

    $updated_product = idplates_labelbuilder_copy_label_to_product($label, $product);
    $line_item = commerce_product_line_item_new($updated_product, $qty);
    $line_item = commerce_cart_product_add($uid, $line_item, FALSE);
    return $line_item;
  }
  catch (Exception $e) {
    return FALSE;
  }

}

function idplates_labelbuilder_copy_label_to_product($label, &$product) {
  $product->data['idplates_labelbuilder']['label'] = $label;
  $product_wrapper = entity_metadata_wrapper('commerce_product', $product);
  //todo: jace fix this
  //  $product_wrapper->field_numbering_barcode_options->set($label->numbering);
  $product_wrapper->field_label_text_line_1->set($label->getText()['text_a']['text']);
  $product_wrapper->field_label_text_line_2->set($label->getText()['text_b']['text']);
  $product_wrapper->field_label_text_line_3->set($label->getText()['text_c']['text']);
  commerce_product_save($product);
  return $product;
}

function idplates_label_builder_get_label_preview(&$form, &$form_state) {
  $form['column_right']['label_proof'] = array(
    '#type' => 'fieldset',
    '#title' => t('Label Proof'),
  );
  $form['column_right']['label_proof']['preview'] = array(
    '#type' => 'item',
    '#prefix' => '<div id="idplates-labelbuilder-preview-ajax-wrapper">',
    '#suffix' => '</div>',
    '#markup' => theme('idplates_labelbuilder_preview', array(
      'label' => $form_state['label'],
    )),
  );

  $qty = !empty($form_state['values']['qty']) ? $form_state['values']['qty'] : 100;

  $form['column_right']['label_proof']['qty'] = array(
    '#type' => 'textfield',
    '#title' => t('Quantity'),
    '#prefix' => '<div class="idplates-labelbuilder-qty-price-wrapper">',
    '#suffix' => '</div>',
    '#default_value' => $qty,
    '#ajax' => array(
      'callback' => 'idplates_label_builder_live_price_ajax_callback',
      'method' => 'replace',
      //      'event' => 'keyup',
      'progress' => array(),
      'keypress' => TRUE,
    ),
    '#description' => t('Hit "Enter" to update the price.'),
    '#weight' => 50,
  );


  $form['column_right']['label_proof']['live_price'] = array(
    '#type' => 'item',
    '#markup' => theme('idplates_labelbuilder_live_price', array(
      'label' => $form_state['label'],
      'quantity' => $qty,
    )),
  );

  $can_add_to_cart = $form_state['build_info']['form_id'] === 'idplates_labelbuilder_options_form';
  $form['column_right']['add_to_cart'] = array(
    '#type' => 'submit',
    '#value' => t('Add to Cart'),
    '#disabled' => !$can_add_to_cart,
    '#submit' => array('idplates_labelbuilder_add_to_cart_submit'),
    '#validate' => array('idplates_labelbuilder_add_to_cart_validate'),
  );


}

function idplates_labelbuilder_add_to_cart_submit($form, &$form_state) {
  global $user;
  $label = $_SESSION['idplates']['label'];
  $result = idplates_labelbuilder_add_to_cart($form_state['product'], $label, $user->uid, $form_state['values']['qty']);

  if ($result) {
    $form_state['redirect'] = 'cart';
    unset($_SESSION['idplates']);
  }

}

function idplates_labelbuilder_add_to_cart_validate($form, &$form_state) {
  $qty = $form_state['values']['qty'];
  if ($qty < 100) {
    form_set_error('qty', t('Minimum purchase of 100 labels.'));
  }
}

function idplates_label_builder_live_price_ajax_callback($form, $form_state) {
  $qty = !empty($form_state['values']['qty']) ? $form_state['values']['qty'] : $form['column_right']['label_proof']['qty']['#default_value'];

  $markup = theme('idplates_labelbuilder_live_price', array(
    'label' => $form_state['label'],
    'quantity' => $qty,
  ));
  $commands[] = ajax_command_replace('#idplates-labelbuilder-live-price-ajax-wrapper', $markup);
  $commands[] = ajax_command_invoke('#edit-qty', 'focus');
  return array('#type' => 'ajax', '#commands' => $commands);
}

function idplates_label_builder_preview_ajax_callback($form, $form_state) {
  return $form['column_right']['label_proof']['preview'];
}
