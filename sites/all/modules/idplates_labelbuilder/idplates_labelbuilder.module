<?php

/**
 * @file
 * ID Plates module file.
 */

define("FREE_COLORS", array('000000'));

/**
 * Implements hook_menu().
 */
function idplates_labelbuilder_menu() {
  $items = array();

  $items['labelbuilder/size/%node'] = array(
    'title' => 'ID Advantage',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('idplates_labelbuilder_size_form', 2),
    'access arguments' => array('access content'),
    'file' => 'includes/idplates_labelbuilder.sizes.inc',
  );

  $items['labelbuilder/layout/%commerce_product'] = array(
    'title' => 'ID Advantage',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('idplates_labelbuilder_layout_form', 2),
    'access arguments' => array('access content'),
    'file' => 'includes/idplates_labelbuilder.layouts.inc',
  );

  $items['labelbuilder/customize'] = array(
    'title' => 'ID Advantage',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('idplates_labelbuilder_customize_form', 2),
    'access arguments' => array('access content'),
    'file' => 'includes/idplates_labelbuilder.customize.inc',
  );

  $items['labelbuilder/options'] = array(
    'title' => 'ID Advantage',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('idplates_labelbuilder_options_form'),
    'access arguments' => array('access content'),
    'file' => 'includes/idplates_labelbuilder.options.inc',
  );

  $items['test'] = array(
    'title' => 'ID Advantage',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('testy'),
    'access arguments' => array('access content'),
  );

  return $items;
}

function testy($form, &$form_state) {
  $form['numbering_options'] = array(
    '#type' => 'radios',
    '#options' => array(
      'no' => 'no',
      'custom' => 'custom',
      'consecutive' => 'consecutive',
    ),
    '#title' => t('Select the options for numbering.'),
    '#default_value' => 'no',
  );

  $form['consecutive_options'] = array(
    '#type' => 'textfield',
    '#title' => t('Starting Barcode Number'),
    '#states' => array(
      'visible' => array(
        ':input[name="numbering_options"]' => array('value' => 'consecutive'),
      ),
    ),
  );

  return $form;
}

/**
 * Implements hook_theme().
 */
function idplates_labelbuilder_theme($existing, $type, $theme, $path) {
  return array(
    'idplates_labelbuilder_preview' => array(
      'template' => 'idplates-labelbuilder-preview',
      'path' => drupal_get_path('module', 'idplates_labelbuilder') . '/templates',
      'arguments' => array(
        'label' => NULL,
        'backend' => NULL,
        'unique_layout' => NULL,
      ),
    ),
    'idplates_labelbuilder_size' => array(
      'template' => 'idplates-labelbuilder-size',
      'path' => drupal_get_path('module', 'idplates_labelbuilder') . '/templates',
      'arguments' => array(
        'path' => NULL,
        'size' => NULL,
        'attributes' => NULL,
      ),
    ),
    'idplates_labelbuilder_layout' => array(
      'template' => 'idplates-labelbuilder-layout',
      'path' => drupal_get_path('module', 'idplates_labelbuilder') . '/templates',
      'arguments' => array(
        'path' => NULL,
        'layout' => NULL,
        'attributes' => NULL,
      ),
    ),
    'idplates_labelbuilder_live_price' => array(
      'template' => 'idplates-labelbuilder-live-price',
      'path' => drupal_get_path('module', 'idplates_labelbuilder') . '/templates',
      'arguments' => array(
        'label' => NULL,
        'quantity' => NULL,
      ),
    ),
    'idplates_labelbuilder_breadcrumb' => array(
      'template' => 'idplates-labelbuilder-breadcrumb',
      'path' => drupal_get_path('module', 'idplates_labelbuilder') . '/templates',
      'arguments' => array(
        'current_step' => NULL,
        'label' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function idplates_labelbuilder_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'idplates_labelbuilder') . '/includes/views/',
    'template path' => drupal_get_path('module', 'idplates_labelbuilder') . '/includes/views/templates',
  );
}

/**
 * Implements hook_default_rules_configuration_alter().
 **/
function idplates_labelbuilder_default_rules_configuration_alter(&$configs) {
  unset($configs['commerce_price_table_override_price']);
}

/**
 * Implements hook_views_pre_build().
 */
function idplates_labelbuilder_views_pre_build(&$view) {
  if ($view->name === 'commerce_line_item_table') {
    if (!user_access('administer orders')) {
      unset($view->field['commerce_product']);
    }
  }
}

/**
 * Adds the label to the user's cart along with any and all extra items
 * selected in the label builder.
 *
 * @param $product
 * @param Label $label
 * @param int $uid
 * @param int $qty
 *
 * @return array|bool|null
 */
function idplates_labelbuilder_add_to_cart($product, $label, $uid = 0, $qty = 100) {
  try {
    foreach ($label->getExtras() as $item) {
      $line_item = commerce_product_line_item_new((commerce_product_load($item['product_id'])), $item['qty']);
      commerce_cart_product_add($uid, $line_item);
    }
    $line_item = commerce_product_line_item_new($product, $qty);
    $line_item = _idplates_labelbuilder_copy_label_to_line_item($label, $line_item);
    $line_item = commerce_cart_product_add($uid, $line_item, FALSE);
    return $line_item;
  }
  catch (Exception $e) {
    return FALSE;
  }
}

/**
 * Builds the label preview section of the label builder form.
 */
function idplates_labelbuilder_get_label_preview(&$form, &$form_state) {
  $form['column_right']['label_proof'] = array(
    '#type' => 'fieldset',
    '#title' => t('Label Proof'),
  );
  $form['column_right']['label_proof']['preview'] = array(
    '#type' => 'item',
    '#prefix' => '<div id="idplates-labelbuilder-preview-ajax-wrapper">',
    '#suffix' => '</div>',
    '#markup' => theme('idplates_labelbuilder_preview', array(
      'label' => $form_state['label'],
      'unique_layout' => 'hanging_tag',
    )),
  );

  $qty = !empty($form_state['values']['qty']) ? $form_state['values']['qty'] : 100;

  $form['column_right']['label_proof']['bottom'] = array(
    '#type' => 'container',
    '#weight' => 49,
    '#prefix' => '<div class="idplates-labelbuilder-qty-price-wrapper">',
    '#suffix' => '</div>',
  );

  $add_to_cart = $form_state['build_info']['form_id'] === 'idplates_labelbuilder_options_form';

  $form['column_right']['label_proof']['bottom']['qty'] = array(
    '#type' => 'textfield',
    '#attributes' => array('class' => array('container-inline')),
    '#description' => t('Quantity'),
    '#default_value' => $qty,
    '#ajax' => array(
      'callback' => 'idplates_labelbuilder_live_price_ajax_callback',
      'method' => 'replace',
      'event' => 'change',
      'progress' => array(),
    ),
    '#maxlength' => 6,
    '#size' => 6,
    '#disabled' => !$add_to_cart,
  );

  if ($add_to_cart) {
    $form['column_right']['label_proof']['live_price'] = array(
      '#type' => 'item',
      '#markup' => theme('idplates_labelbuilder_live_price', array(
        'label' => $form_state['label'],
        'quantity' => $qty,
      )),
    );
  }
  $form['column_right']['label_proof']['bottom']['add_to_cart'] = array(
    '#type' => 'submit',
    '#value' => t('Add to Cart'),
    '#disabled' => !$add_to_cart,
    '#submit' => array('idplates_labelbuilder_add_to_cart_submit'),
    '#validate' => array('idplates_labelbuilder_add_to_cart_validate'),
  );
}

/**
 * Custom submit handler for the add to cart button in the label builder.
 */
function idplates_labelbuilder_add_to_cart_submit($form, &$form_state) {
  global $user;
  $label = $_SESSION['idplates']['label'];
  $result = idplates_labelbuilder_add_to_cart($form_state['product'], $label, $user->uid, $form_state['values']['qty']);

  if ($result) {
    $form_state['redirect'] = 'cart';
    unset($_SESSION['idplates']);
  }

}

/**
 * Custom validate for the add to cart button in the label builder.
 */
function idplates_labelbuilder_add_to_cart_validate($form, &$form_state) {
  $qty = $form_state['values']['qty'];
  if ($qty < 100) {
    form_set_error('qty', t('Minimum purchase of 100 labels.'));
  }
}

/**
 * Custom ajax callback for live price calculations.
 */
function idplates_labelbuilder_live_price_ajax_callback($form, $form_state) {
  $qty = !empty($form_state['values']['qty']) ? $form_state['values']['qty'] : $form['column_right']['label_proof']['qty']['#default_value'];

  $markup = theme('idplates_labelbuilder_live_price', array(
    'label' => $form_state['label'],
    'quantity' => $qty,
  ));
  $commands[] = ajax_command_replace('#idplates-labelbuilder-live-price-ajax-wrapper', $markup);
  return array('#type' => 'ajax', '#commands' => $commands);
}

function idplates_labelbuilder_preview_ajax_callback($form, $form_state) {
  return $form['column_right']['label_proof']['preview'];
}

/**
 * Renders the label preview.
 *
 * @param $label
 * @param $code
 * @param $no_numbering
 *
 * @return string
 */
function _idplates_labelbuilder_render_label($label, $code, $no_numbering, $unique_layout = NULL) {
  $sections = explode('/', $code);
  $size = explode('x', $label->size);
  $realW = (double) $size[0];
  $realH = (double) $size[1];
  $width = 260;
  $height = $width * $realH / $realW;
  if ($unique_layout === 'hanging_tag') {
    $height -= 120;
  }
  $tag_color = !empty($label->getTagColor()) ? $label->getTagColor() : 'f00';
  $text_color = !empty($label->getText()['color']) ? $label->getText()['color'] : 'fff';
  $font_size['a'] = !empty($label->getText()['text_a']['size']) ? $label->getText()['text_a']['size'] : '12';
  $font_size['b'] = !empty($label->getText()['text_b']['size']) ? $label->getText()['text_b']['size'] : '10';
  $font_size['c'] = !empty($label->getText()['text_c']['size']) ? $label->getText()['text_c']['size'] : '10';
  $serial_number = '000001';

  $section_height = _idplates_labelbuilder_get_section_heights($code, $height);

  if (count($section_height) == 1) {
    $line_height_a = $height;
  }

  $markup = '';
  if ($unique_layout == 'hanging_tag') {
    $markup .= _idplates_labelbuilder_render_hanging_tag();
  }
  $markup .= '<div class="idplates-labelbuilder-preview-wrapper" style="width:' . $width . 'px; height: ' . $height . 'px">';

  foreach ($sections as $index => $preview_section):
    $background = '#fff';
    $current_section_height = $section_height[$index];
    if (ctype_upper($preview_section)) {
      $background = '#' . $tag_color;
    }
    elseif (_idplates_labelbuilder_label_is_metallic($label)) {
      $background = 'url(' . base_path() . drupal_get_path('module', 'idplates_labelbuilder') . '/gfx/metal_background.png)';
    }

    $markup .= '<div class="idplates-labelbuilder-preview-section-wrapper"
       style="height: ' . $current_section_height . ';color: #' . $text_color . '; background: ' . $background . ';background-size: contain">';
    $markup .= '<div class="idplates-labelbuilder-preview-section" style="height:100%">';
    $label_markup = '';
    $double_serial_size = FALSE;
    foreach (str_split($preview_section) as $char) :
      $char = strtolower($char);
      $styles = '';
      $classes = '';
      $content = '';
      $tag = 'p';
      switch ($char) :
        case 'a':
        case 'b':
        case 'c':
          $styles .= 'font-size:' . $font_size[$char] . 'pt';
          $content = !empty($label->getText()['text_' . $char]['text']) ? $label->getText()['text_' . $char]['text'] : t('Text ') . strtoupper($char);
          break;
        case 'x':
          $classes = 'idplates-labelbuilder-preview-wrapper-barcode' . $no_numbering;
          $content = '*' . $serial_number . '*';
          $styles .= 'color: transparent;height:' . $section_height['barcode_height'] . 'px;margin-top:' . $section_height['barcode_margin'] . 'px;';
          break;
        case 'x':
          $classes = 'idplates-labelbuilder-preview-wrapper-barcode' . $no_numbering;
          $content = '*' . $serial_number . '*';
          $styles .= 'color: transparent;height:' . $section_height['barcode_height'] . 'px;margin-top:' . $section_height['barcode_margin'] . 'px;';
          break;
        case 's':
          $classes = $no_numbering;
          $multiplier = $double_serial_size ? 2 : 1;
          $styles .= 'font-size:' . $section_height['serial_height'] * $multiplier . 'pt;font-weight:bold;color:#000;';
          $content = $serial_number;
          $double_serial_size = FALSE;
          break;
        case 'm':
          $classes = 'idplates-labelbuilder-inline';
          $content = theme('image', array(
            'path' => drupal_get_path('module', 'idplates_labelbuilder') . '/gfx/qr_code.png',
            'attributes' => array(),
          ));
          $tag = 'div';
          break;
        case '-':
          $classes = 'idplates-labelbuilder-inline hidden';
          $tag = 'div';
          $double_serial_size = TRUE;
          break;
        case 'l':
          $tag = 'div';
          $logo = file_load($label->getLogo());
          $content = t('LOGO HERE');
          if (empty($logo)) {
            $classes = 'idplates-labelbuilder-empty-logo';
          }
          else {
            $content = theme('image', array(
              'path' => file_create_url($logo->uri),
              'attributes' => array('class' => array('idplates-labelbuilder-logo')),
            ));
          }
          break;
      endswitch;

      $label_markup .= '<' . $tag . ' class="' . $classes . '" style="' . $styles . '">' . $content . '</' . $tag . '>';

    endforeach;
    $markup .= $label_markup;
    $markup .= '</div></div>';
  endforeach;
  $markup .= '</div>';

  return $markup;
}

function _idplates_labelbuilder_render_hanging_tag() {
  //    <script type="application/javascript">
  //    function draw() {
  //      var canvas = document.getElementById('canvas');
  //      if (canvas.getContext) {
  //        var ctx = canvas.getContext('2d');
  //
  //        ctx.fillStyle = 'rgb(200,0,0)';
  //        ctx.fillRect (10, 10, 50, 50);
  //
  //        ctx.fillStyle = 'rgba(0, 0, 200, 0.5)';
  //        ctx.fillRect (30, 30, 50, 50);
  //      }
  //    }
  //  </script>
}

/**
 * Gets the number of text lines from the layout code.
 *
 * @param $code
 *
 * @return int
 */
function _idplates_labelbuilder_get_textline_count($code) {
  $count = 0;
  $textline_codes = 'ABCabc';
  foreach (str_split($textline_codes) as $char) {
    if (substr_count($code, $char)) {
      $count++;
    }
  }

  return $count;
}

/**
 * Builds a section heights array used in the rendering of the label preview.
 *
 * @param $code
 * @param $height
 *
 * @return array
 */
function _idplates_labelbuilder_get_section_heights($code, $height) {
  $section_height = array();

  switch (_idplates_labelbuilder_get_textline_count($code)) {
    case 1:
      $section_height[0] = '29%';
      $section_height[1] = '72%';
      $section_height['barcode_height'] = $height * .72 * .6;
      $section_height['serial_height'] = $height * .72 * .33 * .5;
      $section_height['barcode_margin'] = -4;
      break;
    case 2:
      $section_height[0] = '43%';
      $section_height[1] = '58%';
      $section_height['barcode_height'] = $height * .58 * .5;
      $section_height['serial_height'] = $height * .58 * .4 * .5;
      $section_height['barcode_margin'] = -5;
      break;
    case 3:
      $section_height[0] = '37%';
      $section_height[1] = '42%';
      $section_height[2] = '21%';
      $section_height['barcode_height'] = $height * .42 * .65;
      $section_height['serial_height'] = $height * .42 * .3 * .8;
      $section_height['barcode_margin'] = 3;
      break;
    default:
      $section_height[0] = '100%';
      $section_height['barcode_height'] = $height * .5;
      $section_height['serial_height'] = $height * .25 * .8;
      $section_height['barcode_margin'] = 10;
  }

  return $section_height;
}

/**
 * Custom implementation of commerce_price_table_get_amount_qty.
 *
 * @see commerce_price_table_get_amount_qty()
 *
 * @param $product
 * @param int $quantity
 * @param array $items
 *
 * @return array
 */
function idplates_labelbuilder_get_amount_qty($product, $quantity = 1, $items = array(), $line_item) {
  $product_wrapper = entity_metadata_wrapper('commerce_product', $product);
  if (empty($items)) {
    // Support legacy versions where rules doesn't send $items over.
    // Look up all price table items in the current product.
    $fields = commerce_info_fields('commerce_price_table', 'commerce_product');
    foreach ($fields as $field) {
      if (!empty($product->{$field['field_name']})) {
        foreach ($product_wrapper->{$field['field_name']}->value() as $item) {
          $items[] = $item;
        }
      }
    }
  }

  $label = $line_item->data['idplates_labelbuilder']['label'];
  if (_idplates_labelbuilder_use_metal_price($label)) {
    $items = $product_wrapper->field_metal_color_price_table->value();
  }
  // Sort the items by quantity and return the matching one.
  uasort($items, 'commerce_price_table_sort_by_qty');
  foreach ($items as $item) {
    if ($quantity <= $item['max_qty'] && $quantity >= $item['min_qty']) {
      return $item;
    }
  }

  // Handle the unlimited qty.
  foreach ($items as $item) {
    if ($item['max_qty'] == -1) {
      return $item;
    }
  }

  // We fallback to the higher one if no match was found.
  return end($items);
}

/**
 * Checks to see if the label needs a tag color element in the customization
 * section of the label builder.
 *
 * @param $layout_code
 *
 * @return bool
 *   Needs a tag color element.
 */
function _idplates_labelbuilder_needs_tag_color($layout_code) {
  $letters = preg_replace('/[^a-zA-Z]+/', '', $layout_code);
  return !ctype_lower($letters);
}

/**
 * Checks to see if the label needs a tag color element in the customization
 * section of the label builder.
 *
 * @param $layout_code
 *
 * @return bool
 *   Needs a tag color element.
 */
function _idplates_labelbuilder_needs_text_options($layout_code) {
  return _idplates_labelbuilder_get_textline_count($layout_code) > 0;
}

/**
 * Checks to see if the label needs a tag color element in the customization
 * section of the label builder.
 *
 * @param $layout_code
 *
 * @return bool
 *   Needs a tag color element.
 */
function _idplates_labelbuilder_needs_color($layout_code) {
  return _idplates_labelbuilder_needs_tag_color($layout_code) || _idplates_labelbuilder_needs_text_options($layout_code);
}

/**
 * Checks to see if the label needs to use the metal pricing table.
 *
 * @param null $label
 *
 * @return bool
 *   Use metal pricing table.
 */
function _idplates_labelbuilder_use_metal_price($label = NULL) {
  // If the metallic label has other colours than black, use the metal pricing table instead.
  if (_idplates_labelbuilder_label_is_metallic($label)) {
    $tag_color = $label->getTagColor();
    $text_color = $label->getText()['color'];
    return !((empty($tag_color) || in_array($tag_color, FREE_COLORS)) && (empty($text_color) || in_array($text_color, FREE_COLORS)));
  }

  return FALSE;
}

/**
 * Checks to see if the label is metallic.
 *
 * @param Label $label
 *
 * @return bool
 */
function _idplates_labelbuilder_label_is_metallic($label) {
  if (!empty($label)) {
    $layout = taxonomy_term_load($label->getLayoutTid());
    if (!empty($layout)) {
      $layout_wrapper = entity_metadata_wrapper('taxonomy_term', $layout);
      return $layout_wrapper->field_layout_look->value() === 'M';
    }
  }
  return FALSE;
}

/**
 * Copies the label to the line item to be referrenced later when needed.
 *
 * @param $label
 * @param $line_item
 *
 * @return array
 */
function _idplates_labelbuilder_copy_label_to_line_item($label, &$line_item) {
  $line_item->data['idplates_labelbuilder']['label'] = $label;
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
  $line_item_wrapper->save();
  return $line_item;
}

/**
 * @param Label $label
 * @param string $code
 *
 * @return string
 */
function _idplates_labelbuilder_get_hanging_tag_color($label, $code) {
  if ($bg = $label->getTagColor()) {
    return $bg;
  }
  return 'FFFFFF';
}
